#!/usr/bin/env bash

print_help() {
	echo "Converts between hex, binary, octal, and decimal."
	echo "Usage: 0x <value>"	
	echo " - Hex values start with 0x, case insensitive"
	echo " - Binary values start with 0b"	
	echo " - Octal values start with 0c (0c looks like the first syllable of Octal)"
	echo " - Decimal values are positive integers that do not fit the above parameters"
}

#$1 = number to print
print_input() {
	echo
	echo "Input:   $1"
}

# $1 = number to convert
# $2 = base of $1
print_dec() {
	decnum="$(echo "obase=10; ibase=$2; $1" | bc)"
	echo "Decimal: $decnum"
}

# $1 = number to convert
# $2 = base of $1
print_hex() {
	hexnum="$(echo "obase=16; ibase=$2; $1" | bc)"
	echo "Hex:     0x$hexnum"
}

# $1 = number to convert
# $2 = base of $1
print_bin() {
	binnum="$(echo "obase=2; ibase=$2; $1" | bc)"
	echo "Binary:  0b$binnum"
}

# $1 = number to convert
# $2 = base of $1
print_oct() {
	octnum="$(echo "obase=8; ibase=$2; $1" | bc)"
	if [ "${#octnum}" -eq 1 ]; then
		echo "Octal:   00$octnum"
	elif [ "${#octnum}" -eq 2 ]; then
		echo "Octal:   0$octnum"
	else
		echo "Octal:   $octnum"
	fi
}
#1 or more args are required
if [ "$#" -eq "0" ]; then 
	print_help
	exit 1
fi

#if any arg == "-h", print help
for arg in "$@"; do
	if [ "$1" == "-h" ]; then
		print_help
		exit 0
	fi
done

#loop through all args and parse accordingly
for num in "$@"; do
	#regex: $num starts w/ a 0 <[0]>, then either an x or an X <[xX]>, then any amount <+> of valid hex digits [[:xdigit:]], but not no hex digits <+>
	if [[ "$num" =~ ^[0][xX][[:xdigit:]]+$ ]]; then #hexadecimal
		print_input "$num"
		num="${num^^}"
		num="${num#*0X}"
		print_dec "$num" "16"
		print_bin "$num" "16"
		print_oct "$num" "16"

	#regex: $num starts with a 0 <[0]>, then either a b or a B [bB], then any amount <+> of 1's or 0's <[01]>, but not no 1's or 0's <+>
	elif [[ "$num" =~ ^[0][bB][01]+$ ]]; then #binary
		print_input "$num"
		num="${num^^}"
		num="${num#*0B}"
		print_dec "$num" "2"
		print_hex "$num" "2"
		print_oct "$num" "2"

	#regex: $num starts with a 0 <[0]>, then either a c or a C <[cC]>, then any amount <+> of valid octal digits <[0-7]>, but not no octal digits <+>
	elif [[ "$num" =~ ^[0][cC][0-7]+$ ]]; then #octal
		print_input "$num"
		num="${num^^}"
		num="${num#*0C}"
		print_dec "$num" "8"
		print_hex "$num" "8"
		print_bin "$num" "8"
	#regex: $num contains any amount <+> of valid decimal digits<[0-9]>, but not no decimal digits <+>
	elif [[ "$num" =~ ^[0-9]+$ ]]; then #decimal
		print_input "$num"
		print_hex "$num" "16"
		print_bin "$num" "16"	
		print_oct "$num" "16"
	else
		echo "Argument(s) do not match any supported number format."
	fi
done